@page "/share"
<PageTitle>Share</PageTitle>
@attribute [Authorize]
@inject IBlobStorageService BlobStorageService
@inject IRecipesService RecipesService
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler

<div class="container-fluid jumbotron-bg-img custom-font">
    <div class="row align-items-center h-100 text-center">
        <div class="col-lg-12 col-xl-12 col-md-12 col-sm-12 mx-auto">
            <div class="ingredient-display header">
                <h1 class="text-center m-3 p-3">Share</h1>
            </div>
        </div>
    </div>
</div>

<EditForm Model="recipeModel" OnValidSubmit="SubmitRecipe" class="ingredient-display my-5 mx-lg-4 mx-2 p-2 border-3 border-warning header">
    <DataAnnotationsValidator />
    <div class="row mt-3">
        <div class="col-md-3">
            <label class="text-lg">Recipe Name:</label>
            <InputText @bind-Value="recipeModel.Name" class="form-control" />
            <ValidationMessage For="@(() => recipeModel.Name)" />
        </div>
        <div class="col-md-9">
            <label class="text-lg">Recipe Description:</label>
            <InputText @bind-Value="recipeModel.Description" class="form-control" />
            <ValidationMessage For="@(() => recipeModel.Description)" />
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-12">
            <label class="text-lg">Recipe Instructions:</label>
            <textarea @bind="recipeModel.Instructions" class="form-control"></textarea>
            <ValidationMessage For="@(() => recipeModel.Instructions)" />
        </div>
    </div>

    @foreach (var recipeIngredient in recipeModel.RecipeIngredients)
    {
        <div class="row mt-3">
            <div class="col-3">
                <label class="text-lg">Amount:</label>
                <InputNumber @bind-Value="recipeIngredient.Amount" class="form-control" />
            </div>
            <div class="col-4">
                <label class="text-lg">Unit:</label>
                <InputText @bind-Value="recipeIngredient.Unit" class="form-control" />
                <div class="form-text">*May be left empty if necessary.*</div>
            </div>
            <div class="col-4">
                <label class="text-lg">Ingredient:</label>
                <InputText @bind-Value="recipeIngredient.IngredientName" class="form-control" />
            </div>
            <div class="col-1 d-flex align-items-center justify-content-center">
                <div class="btn" @onclick="() => RemoveRecipeIngredient(recipeIngredient)">
                    <i class="fa-solid fa-trash-can fa-lg" style="color: #d63d3d;"></i>
                </div>
            </div>
        </div>

    }
    <div class="row mt-3">
        <div class="col-md-12 col-sm-3 my-2">
            <button type="button" class="btn btn-success" @onclick="AddRecipeIngredient">
                <i class="fa-solid fa-plus"></i> Add an Ingredient
            </button>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-sm-12">
            <label>
                <InputFile class="form-control" accept=".jpg, .png, .jpeg" disabled="@fileLoading" OnChange="@OnInputFileChange" single />
                <div class="form-text">*Optional*</div>
            </label>
            @if (fileLoading)
            {
                <i class="fa fa-refresh"></i> <span>Uploading...</span>
            }
        </div>
    </div>

    <div class="row mb-3">
        @if (errors.Count > 0)
        {
            @foreach (var error in errors)
            {
                <div class="col-12">
                    <div class="alert alert-danger">@error</div>
                </div>
                
            }
            <div class="col-12 mt-3">
                <div class="col-md-12">
                    <button type="submit" class="btn disabled btn-primary w-100">Submit</button>
                </div>
            </div>
        }
        else
        {
            <div class="col-12 mt-3">
                <div class="col-md-12">
                    <button type="submit" class="btn btn-primary w-100">Submit</button>
                </div>
            </div>
        }
    </div>
</EditForm>

<div class="row mt-2 mx-4">
    @if (createdRecipeId >= 0 && hasSubmitted == true)
    {
        <div class="alert alert-success">Your recipe was submitted. It will be reviewed before being permanently added to the site.</div>
        <RecipeCards RecipesList="addedRecipesList"></RecipeCards>
    }
    else if (createdRecipeId <= 0 && hasSubmitted == true)
    {
        <div class="alert alert-danger">There was an error. If the issue persists, please email support at tybardesigns@gmail.com</div>
    }
</div>


@code {
    private RecipeModel recipeModel = new RecipeModel();
    private List<RecipeDto> addedRecipesList = new();
    private const long maxFileSize = 1024 * 1024 * 3;
    private int createdRecipeId;
    private bool hasSubmitted = false;
    private bool fileLoading;
    private List<string> errors = new();
    private IBrowserFile? selectedFile;

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        if (e.File.Size > maxFileSize)
        {
            errors.Add($"The file is too large. File must be smaller than 3MB.");
        }
        else
        {
            selectedFile = e.File;
            errors.Clear();
        }
    }

    private async Task OnUploadSubmit()
    {
        fileLoading = true;
        try
        {
            var newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(selectedFile!.Name)
            );
            var blobUrl = await BlobStorageService.UploadFileToBlobAsync(newFileName, selectedFile.ContentType, selectedFile.OpenReadStream(maxFileSize));
            recipeModel.ImageUrl = blobUrl;
        }
        catch (Exception ex)
        {
            errors.Add($"File: {selectedFile!.Name} Error: {ex.Message}");
        }
        fileLoading = false;
    }

    private async Task SubmitRecipe()
    {
        hasSubmitted = false; // Clear previous submission status
        try
        {
            if(selectedFile is not null)
            {
                await OnUploadSubmit();
            }
            createdRecipeId = await RecipesService.AddAsync(recipeModel);

            RecipeDto recipeDto = new RecipeDto
            {
                RecipeId = createdRecipeId,
                Name = recipeModel.Name,
                Description = recipeModel.Description,
                ImageUrl = recipeModel.ImageUrl
            };
            addedRecipesList.Add(recipeDto);
            hasSubmitted = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errors.Add($"{ex.Message}");
        }
    }

    private void AddRecipeIngredient()
    {
        recipeModel.RecipeIngredients.Add(new RecipeIngredient());
    }

    private void RemoveRecipeIngredient(RecipeIngredient ingredientToRemove)
    {
        recipeModel.RecipeIngredients.Remove(ingredientToRemove);
    }
}
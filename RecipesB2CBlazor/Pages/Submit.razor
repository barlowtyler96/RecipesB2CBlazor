@page "/submit"
@attribute [Authorize]
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Microsoft.Identity.Web
@using RecipesB2CBlazor.Services;
@inject IRecipesService recipesService
@inject ITokenAcquisition tokenAqcuisition
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
<PageTitle>Submit</PageTitle>

<h3>Add Recipe</h3>

<EditForm Model="recipeDto" OnValidSubmit="SubmitRecipe">
    <DataAnnotationsValidator />
    <div class="">
        <label>Recipe Name:</label>
        <InputText @bind-Value="recipeDto.Name" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Name)" />
    </div>
    <div class="">
        <label>Recipe Description:</label>
        <InputText @bind-Value="recipeDto.Description" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Description)" />
    </div>
    <div class="">
        <label>Recipe Instructions:</label>
        <InputText @bind-Value="recipeDto.Instructions" class="form-control" />
        <ValidationMessage For="@(() => recipeDto.Instructions)" />
    </div>


    <h4>Recipe Ingredients</h4>
    @foreach (var recipeIngredient in recipeDto.RecipeIngredients)
    {
        <div class="recipeIngredient">
            <div class="">
                <label>Amount:</label>
                <InputNumber @bind-Value="recipeIngredient.Amount" class="form-control" />
            </div>
            <div class="">
                <label>Unit:</label>
                <InputText @bind-Value="recipeIngredient.Unit" class="form-control" />
            </div>
            <div class="">
                <label>Ingredient:</label>
                <InputText @bind-Value="recipeIngredient.IngredientName" class="form-control" />
            </div>
        </div>
    }

    <button type="button" class="btn btn-success" @onclick="AddRecipeIngredient">Add Recipe Ingredient</button>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<div class="row mt-2">
    @if (createdRecipe is not null && hasSubmitted == true)
    {
        <div class="alert alert-success">Your recipe was submitted.</div>
    }
    else if (createdRecipe is null && hasSubmitted == true)
    {
        <div class="alert alert-danger">There was an error.</div>
    }
</div>



@code {
    private RecipeDto recipeDto = new RecipeDto();
    private RecipeDto? createdRecipe;
    private bool hasSubmitted = false;

    private async Task SubmitRecipe()
    {
        try
        {
            hasSubmitted = false; // Clear previous submission status
            createdRecipe = await recipesService.AddAsync(recipeDto);
            hasSubmitted = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null)
        {
            string fileName = Guid.NewGuid().ToString() + Path.GetExtension(imageFile.Name);

            string relativeImagePath = $"RecipeImages/DishImages/{fileName}";
            recipeDto.ImagePath = relativeImagePath;
            string absoluteImagePath = Path.Combine("wwwroot", relativeImagePath);

            using (var stream = new FileStream(absoluteImagePath, FileMode.Create))
            {
                await imageFile.OpenReadStream().CopyToAsync(stream);
            }
        }
    }

    private void AddRecipeIngredient()
    {
        recipeDto.RecipeIngredients.Add(new RecipeIngredient());
    }
}
@inject IRecipesService RecipesService
@inject IUsersService UsersService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@page "/"
@using RecipesB2CBlazor.Helpers;
@using System.Security.Claims


<PageTitle>Culinary Shares</PageTitle>

<div class="container-fluid custom-font">
    <div class="row align-items-center h-100 text-center">
        <div class="col-lg-12 col-xl-12 col-md-12 col-sm-12 mx-auto">
            <div class="header">
                <h1 class="text-center m-3 p-3">
                    Recently Added
                </h1>
            </div>
        </div>
    </div>
</div>

@if (recipesResponse.Data is not null)
{
    <div class="container-fluid">
        <RecipeCards UserFavorites="@userFavorites" RecipesList="@recipesResponse.Data" />
    </div>
    <div class="container-fluid">
        <div class="row py-3 text-center">
            <Pagination CurrentPage="@recipesResponse.CurrentPageNumber"
                        TotalItems="@recipesResponse.TotalCount"
                        ItemsPerPage="@recipesResponse.PageSize"
                        OnPageChanged="HandlePageChanged">
            </Pagination>
        </div>
    </div>
}

@code {
    private RecipesResponse recipesResponse = new RecipesResponse();
    private List<int> userFavorites = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            recipesResponse = await RecipesService.GetRecentsAsync(recipesResponse.CurrentPageNumber, recipesResponse.PageSize);
            //userFavorites = await UsersService.GetUserFavoritesAsync();
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }

    private async Task HandlePageChanged(int newPage)
    {
        try
        {
            recipesResponse = await RecipesService.GetRecentsAsync(newPage, recipesResponse.PageSize);
        }
        catch (Exception ex)
        {
            ConsentHandler.HandleException(ex);
        }
    }
}
